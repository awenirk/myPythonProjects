from turtle import *

class Sprite(Turtle):
    def __init__(self, x, y, step, shape, color):
        super().__init__()
        self.up()
        self.speed(3)
        self.goto(x,y)
        self.color(color)
        self.shape(shape)
        self.step = step
    def move_up(self):
        self.goto(self.xcor(), self.ycor() + self.step)
    def move_down(self):
        self.goto(self.xcor(), self.ycor() - self.step)
    def move_left(self):
        self.goto(self.xcor() - self.step, self.ycor())
    def move_right(self):
        self.goto(self.xcor() + self.step, self.ycor())
    def is_collide(self, Sprite):
        dist = self.distance(Sprite.xcor(), Sprite.ycor())
        if dist < 30:
            return True
        else:
            return False
    def set_move(self, x_start, y_start, x_end, y_end):
        self.x_start = x_start
        self.y_start = y_start
        self.x_end = x_end
        self.y_end = y_end
        self.goto(x_start, y_start)
        self.setheading(self. towards (x_end, y_end))
    def make_step(self):
        self.fd(self.step)
        if self.distance(self.x_end, self.y_end) < self.step:
            self.set_move(self.x_end, self.y_end, self.x_start, self.y_start)

t = Sprite(-315, 15, 15, "circle", "blue")
end = Sprite(315, 15, 10, "square", "#3B3D63")
step = 15
s = 15
a = None
t.width(5)
t.down()
t.speed(0)
def draw(x,y):
    t.goto(x, y)
def move(x,y):
    t.up()
    t.goto(x,y)
    t.down()
def move_up():
    t.goto(t.xcor(), t.ycor()+step)
def move_down():
    t.goto(t.xcor(), t.ycor()-step)
def move_left():
    t.goto(t.xcor()-step, t.ycor())
def move_right():
    t.goto(t.xcor()+step, t.ycor())
def color1():
    t.color("#61dab6")
def color2():
    t.color("#1f434e")
def color3():
    t.color("#bbfc70")
def color4():
    t.color("#9d6e99")
def color5():
    t.color("#d42132")
def color6():
    t.color("#bf4b9b")
def color7():
    t.color("#2d7008")
def color8():
    t.color("#707645")
def color9():
    t.color("#9c393c")
def color0():
    t.color("#fbeb63")
def fil():
    t.begin_fill()
def endd():
    t.end_fill()
def upp():
    t.up()
def dow():
    t.down()
def clearr():
    t.clear()
def misce():
    t.goto(-315, 15)
t.shape('turtle')
speed(0)
color("#368bbb")
width(1000100)
forward(0)
a = 15
#Для зрівняння лабіринт з якого я змалбовував - http://surl.li/pfzlm
#Лабіринт тобто прямокутник 41 на 27
#Один квадрат 15 на 15 тобто а на а
def ColCheack():
    color("#d42132")
    down()
    width(8)
    forward(0)
    width(3)
    forward(5)
    width(2)
    forward(5)
    width(1)
    forward(5)
    width(3)
def labirint():
    #              kwadrat
    color("#ffcb22")
    width(5)
    forward(41 * a)
    right(90)
    forward(12 * a)
    up()
    forward(a)
    down()
    forward(14 * a)
    right(90)
    forward(41 * a)
    right(90)
    forward(14 * a)
    up()
    forward(a)
    down()
    forward(12 * a)
    right(90)
    #              labirint
    forward(7 * a)
    right(90)
    forward(a)
    right(90)
    forward(6 * a)
    left(90)
    forward(a)
    left(90)
    forward(5 * a)
    up()
    forward(a)
    down()
    left(90)
    forward(a)
    left(180)
    forward(2 * a)
    right(90)
    forward(3 * a)
    up()
    forward(a)
    down()
    forward(3 * a)
    left(90)
    forward(a)
    left(90)
    forward(2 * a)
    right(90)
    forward(2 * a)
    left(90)
    up()
    forward(a)
    down()
    left(90)
    forward(3 * a)
    left(180)
    forward(4 * a)
    right(90)
    forward(a)
    left(180)
    forward(3 * a)
    right(90)
    forward(4 * a)
    up()
    forward(a)
    down()
    right(90)
    forward(a)
    right(90)
    forward(a)
    left(90)
    forward(3 * a)
    right(90)
    forward(a)
    up()
    forward(a)
    down()
    left(90)
    forward(a)
    left(180)
    forward(a * 2)
    right(90)
    forward(a)
    left(90)
    forward(a)
    left(90)
    up()
    forward(a)
    down()
    right(90)
    forward(a)
    right(90)
    forward(a * 2)
    left(180)
    forward(3 * a)
    left(90)
    forward(3 * a)
    right(90)
    forward(a)
    left(90)
    forward(a)
    left(180)
    forward(a)
    left(90)
    forward(2 * a)
    right(90)
    up()
    forward(4 * a)
    down()
    right(90)
    forward(a)
    right(90)
    forward(a)
    right(90)
    forward(2 * a)
    right(90)
    forward(4 * a)
    left(90)
    forward(3 * a)
    right(90)
    forward(2 * a)
    right(90)
    forward(a)
    right(90)
    forward(a)
    left(90)
    forward(5 * a)
    right(90)
    forward(2 * a)
    left(90)
    forward(2 * a)
    up()
    forward(a)
    down()
    right(90)
    forward(a)
    right(90)
    forward(5 * a)
    right(90)
    forward(2 * a)
    right(90)
    forward(a)
    right(90)
    forward(a)
    up()
    forward(a)
    down()
    left(90)
    forward(4 * a)
    left(90)
    forward(2 * a)
    left(90)
    forward(2 * a)
    right(90)
    forward(6 * a)
    right(90)
    forward(a)
    right(90)
    forward(5 * a)
    right(90)
    up()
    forward(a)
    down()
    right(90)
    forward(6 * a)
    left(90)
    forward(2 * a)
    left(90)
    forward(a)
    left(90)
    forward(a)
    right(90)
    forward(5 * a)
    left(180)
    forward(a)
    left(90)
    forward(a)
    right(90)
    forward(3 * a)
    left(180)
    forward(3 * a)
    right(90)
    forward(3 * a)
    right(90)
    up()
    forward(a)
    down()
    left(90)
    forward(3 * a)
    left(180)
    forward(5 * a)
    left(90)
    up()
    forward(a)
    down()
    left(90)
    forward(2 * a)
    right(90)
    forward(2 * a)
    right(90)
    forward(a)
    right(90)
    forward(a)
    left(90)
    up()
    forward(a)
    down()
    right(90)
    forward(a)
    left(180)
    forward(3 * a)
    left(90)
    forward(4 * a)
    right(90)
    forward(3 * a)
    left(90)
    forward(a)
    left(90)
    up()
    forward(6 * a)
    down()
    left(90)
    forward(2 * a)
    left(90)
    forward(2 * a)
    left(90)
    forward(a)
    left(90)
    forward(a)
    left(90)
    up()
    forward(5 * a)
    down()
    left(90)
    up()
    forward(a)
    down()
    forward(4 * a)
    right(90)
    forward(a)
    right(90)
    forward(2 * a)
    right(90)
    up()
    forward(a)
    down()
    forward(4 * a)
    right(90)
    forward(2 * a)
    right(90)
    forward(3 * a)
    right(90)
    forward(a)
    right(90)
    forward(2 * a)
    up()
    forward(a)
    right(90)
    forward(2 * a)
    down()
    right(90)
    forward(5 * a)
    left(90)
    forward(a)
    right(90)
    forward(4 * a)
    right(90)
    forward(3 * a)
    left(180)
    forward(2 * a)
    left(90)
    forward(a)
    left(90)
    forward(3 * a)
    left(90)
    forward(a)
    left(180)
    forward(3 * a)
    right(90)
    forward(2 * a)
    right(90)
    forward(a)
    right(90)
    forward(a)
    left(90)
    up()
    forward(a)
    down()
    left(90)
    forward(2 * a)
    left(90)
    forward(2 * a)
    up()
    forward(a)
    down()
    right(90)
    forward(a)
    left(90)
    forward(2 * a)
    left(180)
    forward(a)
    left(90)
    forward(4 * a)
    left(90)
    forward(2 * a)
    left(90)
    forward(a)
    left(90)
    forward(a)
    left(180)
    forward(2 * a)
    right(90)
    forward(2 * a)
    right(90)
    forward(3 * a)
    up()
    forward(a)
    down()
    left(90)
    forward(a)
    left(90)
    forward(2 * a)
    up()
    forward(a)
    down()
    forward(2 * a)
    left(90)
    forward(2 * a)
    left(180)
    forward(2 * a)
    right(90)
    forward(2 * a)
    left(90)
    forward(a)
    left(90)
    forward(3 * a)
    left(90)
    forward(4 * a)
    left(90)
    forward(a)
    left(180)
    forward(a)
    left(90)
    forward(a)
    left(90)
    forward(4 * a)
    right(90)
    forward(a)
    right(90)
    up()
    forward(a)
    down()
    forward(3 * a)
    right(90)
    forward(a)
    up()
    forward(6 * a)
    down()
    left(90)
    forward(a)
    left(180)
    forward(8 * a)
    left(90)
    forward(2 * a)
    right(90)
    forward(3 * a)
    right(90)
    forward(a)
    right(90)
    forward(a)
    left(180)
    forward(a)
    right(90)
    forward(a)
    right(90)
    forward(2 * a)
    right(90)
    forward(a)
    right(90)
    up()
    forward(2 * a)
    down()
    right(90)
    forward(7 * a)
    left(90)
    forward(a)
    left(90)
    up()
    forward(a)
    down()
    left(90)
    forward(a)
    left(180)
    forward(5 * a)
    right(180)
    forward(3 * a)
    left(90)
    forward(a)
    left(90)
    forward(4 * a)
    right(90)
    forward(3 * a)
    left(90)
    forward(2 * a)
    left(90)
    forward(a)
    left(90)
    up()
    forward(a)
    down()
    forward(a)
    right(90)
    forward(3 * a)
    right(90)
    forward(a)
    right(90)
    forward(2 * a)
    left(90)
    forward(2 * a)
    left(90)
    forward(2 * a)
    left(90)
    forward(a)
    left(90)
    forward(a)
    left(90)
    up()
    forward(a)
    down()
    right(90)
    forward(5 * a)
    left(90)
    forward(4 * a)
    left(180)
    forward(3 * a)
    right(90)
    forward(a)
    right(90)
    forward(4 * a)
    right(90)
    forward(a)
    up()
    forward(a)
    down()
    right(90)
    forward(3 * a)
    left(90)
    forward(a)
    right(90)
    forward(a)
    right(90)
    forward(a)
    left(90)
    forward(2 * a)
    right(90)
    forward(a)
    left(90)
    up()
    forward(a)
    down()
    left(90)
    forward(2 * a)
    left(90)
    forward(4 * a)
    right(90)
    forward(4 * a)
    left(90)
    forward(a)
    right(90)
    forward(a)
    right(90)
    forward(a)
    left(180)
    forward(a)
    left(90)
    forward(5 * a)
    right(90)
    forward(3 * a)
    left(90)
    forward(2 * a)
    right(90)
    forward(a)
    right(90)
    forward(12 * a)
    right(90)
    forward(2 * a)
    right(90)
    forward(3 * a)
    right(90)
    forward(a)
    right(90)
    forward(2 * a)
    up()
    forward(2 * a)
    down()
    right(90)
    forward(a)
    left(90)
    forward(a)
    left(90)
    up()
    forward(a)
    down()
    left(90)
    forward(a)
    left(180)
    forward(2 * a)
    right(90)
    forward(a)
    left(180)
    forward(a)
    right(90)
    forward(2 * a)
    right(90)
    forward(4 * a)
    right(90)
    forward(a)
    right(90)
    forward(3 * a)
    left(180)
    up()
    forward(4 * a)
    down()
    left(90)
    forward(a)
    left(180)
    forward(a)
    left(90)
    forward(a)
    up()
    forward(a)
    down()
    left(90)
    forward(a)
    left(180)
    forward(a)
    left(90)
    forward(3 * a)
    up()
    forward(a)
    down()
    left(90)
    forward(a)
    left(180)
    forward(4 * a)
    left(180)
    forward(3 * a)
    right(90)
    up()
    forward(a)
    down()
    forward(a)
    left(90)
    forward(a)
    right(90)
    up()
    forward(a)
    down()
    right(90)
    forward(3 * a)
    up()
    forward(a)
    down()
    forward(2 * a)
    left(90)
    forward(a)
    right(90)
    forward(2 * a)
    left(180)
    forward(a)
    left(90)
    forward(a)
    left(90)
    forward(4 * a)
    left(90)
    forward(a)
    left(90)
    forward(a)
    up()
    forward(a)
    down()
    left(90)
    forward(a)
    left(180)
    fd(2 * a)
    right(90)
    forward(3 * a)
    right(90)
    forward(a)
    left(90)
    fd(a)
    left(90)
    up()
    forward(a)
    down()
    left(90)
    fd(a)
    lt(180)
    fd(2 * a)
    rt(90)
    fd(5 * a)
    rt(90)
    fd(a)
    rt(90)
    fd(3 * a)
    lt(90)
    fd(a)
    lt(180)
    fd(a)
    rt(90)
    fd(8 * a)
    lt(90)
    fd(a)
    rt(90)
    fd(a)
    rt(90)
    fd(2 * a)
    rt(180)
    fd(2 * a)
    lt(90)
    fd(5 * a)
    left(180)
    fd(a)
    lt(90)
    fd(3 * a)
    lt(90)
    fd(a)
    lt(90)
    fd(2 * a)
    rt(90)
    fd(2 * a)
    rt(90)
    fd(2 * a)
    rt(90)
    fd(a)
    rt(90)
    fd(a)
    rt(90)
    up()
    forward(2 * a)
    down()
    rt(90)
    fd(a)
    lt(180)
    fd(2 * a)
    rt(90)
    fd(6 * a)
    lt(180)
    fd(5 * a)
    lt(90)
    fd(6 * a)
    lt(90)
    fd(2 * a)
    rt(90)
    fd(6 * a)
    lt(90)
    fd(6 * a)
    lt(90)
    fd(a)
    lt(90)
    up()
    forward(a)
    down()
    fd(2 * a)
    rt(90)
    fd(2 * a)
    lt(90)
    fd(a)
    lt(180)
    fd(a)
    lt(90)
    fd(3 * a)
    lt(90)
    fd(3 * a)
    lt(90)
    fd(3 * a)
    lt(90)
    fd(a)
    rt(90)
    fd(a)
    lt(180)
    fd(2 * a)
    rt(90)
    fd(a)
    lt(90)
    fd(a)
    lt(90)
    fd(a)
    lt(180)
    fd(a)
    rt(90)
    up()
    forward(3 * a)
    down()
    fd(a)
    rt(90)
    fd(a)
    lt(90)
    fd(a)
    lt(90)
    fd(8 * a)
    lt(90)
    up()
    forward(7 * a)
    down()
    fd(a)
    lt(180)
    fd(a)
    lt(90)
    fd(a)
    lt(180)
    fd(4 * a)
    rt(90)
    fd(a)
    lt(90)
    up()
    forward(8 * a)
    down()
    fd(3 * a)
    lt(90)
    up()
    forward(a)
    down()
    lt(90)
    fd(2 * a)
    rt(90)
    fd(a)
    rt(90)
    fd(3 * a)
    rt(90)
    fd(3 * a)
    lt(90)
    fd(3 * a)
    lt(180)
    fd(a)
    lt(90)
    fd(a)
    lt(180)
    fd(a)
    lt(90)
    fd(6 * a)
    lt(90)
    up()
    forward(6 * a)
    down()
    lt(90)
    up()
    forward(a)
    down()
    fd(4 * a)
    lt(180)
    fd(4 * a)
    lt(90)
    fd(a)
    lt(90)
    fd(5 * a)
    lt(90)
    fd(a)
    rt(90)
    fd(a)
    rt(90)
    fd(3 * a)
    lt(90)
    fd(a)
    lt(90)
    fd(3 * a)
    lt(180)
    fd(a)
    rt(90)
    up()
    forward(2 * a)
    down()
    lt(90)
    fd(3 * a)
    lt(90)
    fd(2 * a)
    rt(90)
    fd(a)
    rt(90)
    fd(5 * a)
    lt(90)
    fd(2 * a)
    lt(180)
    fd(3 * a)
    rt(90)
    fd(a)
    up()
    forward(a)
    down()
    rt(90)
    fd(a)
    lt(180)
    fd(3 * a)
    lt(90)
    fd(2 * a)
    lt(90)
    fd(a)
    lt(90)
    fd(a)
    lt(90)
    up()
    forward(a)
    down()
    lt(90)
    fd(3 * a)
    lt(90)
    fd(3 * a)
    lt(90)
    up()
    forward(a)
    down()
    rt(90)
    fd(2 * a)
    rt(90)
    fd(a)
    rt(90)
    fd(a)
    lt(180)
    fd(4 * a)
    lt(90)
    fd(a)
    lt(90)
    fd(2 * a)
    up()
    forward(a)
    down()
    fd(5 * a)
    rt(90)
    up()
    forward(7 * a)
    down()
    lt(90)
    fd(2 * a)
    lt(180)
    fd(5 * a)
    lt(180)
    fd(2 * a)
    rt(90)
    fd(a)
    rt(90)
    fd(3 * a)
    rt(90)
    fd(6 * a)
    lt(90)
    fd(3 * a)
    lt(90)
    fd(3 * a)
    up()
    forward(a)
    down()
    rt(90)
    fd(a)
    rt(90)
    fd(4 * a)
    rt(90)
    fd(a)
    rt(90)
    fd(a)
    lt(90)
    up()
    forward(a)
    down()
    fd(2 * a)
    rt(90)
    fd(3 * a)
    rt(90)
    fd(2 * a)
    rt(90)
    fd(2 * a)
    rt(90)
    fd(a)
    rt(90)
    fd(a)
    lt(90)
    up()
    forward(a)
    down()
    rt(90)
    fd(2 * a)
    rt(90)
    fd(4 * a)
    rt(90)
    fd(a)
    lt(180)
    fd(a)
    lt(90)
    fd(4 * a)
    rt(90)
    fd(a)
    lt(90)
    fd(3 * a)
    rt(90)
    fd(a)
    rt(90)
    fd(3 * a)
    lt(90)
    fd(a)
    rt(90)
    fd(4 * a)
    rt(90)
    fd(2 * a)
    rt(90)
    fd(3 * a)
    rt(90)
    fd(a)
    rt(90)
    fd(2 * a)
    lt(90)
    up()
    forward(a)
    down()
    lt(90)
    fd(6 * a)
    rt(90)
    fd(2 * a)
    lt(90)
    fd(5 * a)
    lt(90)
    fd(2 * a)
    lt(90)
    up()
    forward(a)
    down()
    fd(4 * a)
    lt(90)
    fd(a)
    lt(90)
    up()
    forward(a)
    down()
    fd(3 * a)
    lt(90)
    fd(a)
    lt(180)
    fd(a)
    up()
    forward(a)
    down()
    lt(90)
    up()
    forward(3 * a)
    down()
    fd(3 * a)
def spos2 ():
    #   №1
    up()
    forward(a)
    down()
    forward(2 * a)
    up()
    forward(a)
    down()
    forward(4 * a)
    up()
    forward(2 * a)
    down()
    forward(a)   
    up()
    forward(a)
    down()
    forward(a)
    up()
    forward(a)
    down()
    forward(6 * a)
    up()
    forward(2 * a)
    down()
    #
    lt(90)
    fd(a)
    lt(90)
    #   №2
    forward(a)
    up()
    forward(a)
    down()
    forward(3 * a)
    up()
    forward(a)
    down()
    forward(2 * a)
    up()
    forward(a)
    down()
    forward(a)
    up()
    forward(2 * a)
    down()
    forward(8 * a)
    up()
    forward(2 * a)
    #
    lt(90)
    fd(a)
    lt(180)
    fd(2 * a)
    rt(90)
    #   №3
    down()
    forward(a)
    up()
    forward(2 * a)
    down()
    forward(2 * a)
    up()
    forward(a)
    down()
    forward(4 * a)
    up()
    forward(2 * a)
    down()
    forward(4 * a)
    up()
    forward(5 * a)
    down()
    forward(a)
    up()
    #
    lt(90)
    fd(a)
    lt(90)
    #   №4
    up()
    forward(2 * a)
    down()
    forward(a)
    up()
    forward(2 * a)
    down()
    forward(a)
    up()
    forward(a)
    down()
    forward(5 * a)
    up()
    forward(a)
    down()
    forward(2 * a)
    up()
    forward(2 * a)
    down()
    forward(a)
    up()
    forward(4 * a)
    down()
    #
    rt(90)
    fd(a)
    rt(90)
    #   №5
    up()
    forward(3 * a)
    down()
    forward(3 * a)
    up()
    forward(4 * a)
    down()
    forward(3 * a)
    up()
    forward(4 * a)
    down()
    forward(a)
    up()
    forward(4 * a)
    down()
    #
    lt(90)
    fd(a)
    lt(90)
    #   №6
    up()
    forward(9 * a)
    down()
    forward(4 * a)
    up()
    forward(a)
    down()
    forward(8 * a)
    #
    lt(90)
    fd(5 * a)
    lt(180)
    fd(5 * a)
    rt(90)
    fd(5 * a)
    lt(90)
    fd(a)
    rt(90)
    #   №7
    up()
    forward(a)
    down()
    forward(3 * a)
    up()
    forward(a)
    down()
    forward(2 * a)
    up()
    forward(8 * a)
    down()
    forward(2 * a)
    #
    lt(90)
    fd(a)
    lt(90)
    #   №8
    up()
    forward(a)
    down()
    forward(2 * a)
    up()
    forward(a)
    down()
    forward(2 * a)
    up()
    forward(4 * a)
    down()
    forward(7 * a)
    #
    lt(90)
    fd(a)
    lt(180)
    fd(2 * a)
    rt(90)
    #   №9
    up()
    forward(a)
    down()
    forward(13 * a)
    up()
    forward(a)
    down()
    forward(a)
    up()
    forward(a)
    down()
    #
    lt(90)
    fd(a)
    lt(90)
    #   №10
    forward(6 * a)
    up()
    forward(3 * a)
    down()
    forward(a)
    up()
    forward(2 * a)
    down()
    forward(3 * a)
    up()
    fd(2 * a)
    #
    lt(90)
    fd(a)
    lt(180)
    fd(2 * a)
    rt(90)
    #   №11
    up()
    forward(3 * a)
    down()
    forward(2 * a)
    up()
    forward(2 * a)
    down()
    forward(a)
    up()
    forward(4 * a)
    down()
    forward(4 * a)
    up()
    forward(a)
    down()
    #
    lt(90)
    fd(a)
    lt(90)
    #   №12
    up()
    forward(3 * a)
    down()
    forward(2 * a)
    up()
    forward(2 * a)
    down()
    forward(a)
    up()
    forward(9 * a)
    down()
    #
    lt(90)
    fd(a)
    lt(180)
    fd(2 * a)
    rt(90)
    #   №13
    up()
    forward(8 * a)
    down()
    forward(4 * a)
    up()
    forward(2 * a)
    down()
    forward(a)
    up()
    fd(2 * a)
    #
    lt(90)
    fd(a)
    lt(90)
    #   №14
    up()
    forward(a)
    down()
    forward(3 * a)
    up()
    forward(2 * a)
    down()
    forward(a)
    up()
    forward(2 * a)
    down()
    forward(a)
    up()
    forward(2 * a)
    down()
    forward(a)
    up()
    forward(2 * a)
    down()
    forward(a)
    up()
    forward(a)
    down()
    #
    lt(90)
    fd(7 * a)
    lt(180)
    fd(8 * a)
    rt(90)
    #   №15
    forward(5 * a)
    up()
    forward(7 * a)
    down()
    forward(a)
    up()
    forward(a)
    down()
    forward(a)
    up()
    forward(2 * a)
    #
    lt(90)
    fd(a)
    lt(90)
    #   №16
    up()
    forward(7 * a)
    down()
    forward(a)
    up()
    forward(2 * a)
    down()
    #
    rt(90)
    fd(a)
    rt(90)
    #   №17
    up()
    fd(2 * a)
    down()
    fd(2 * a)
    up()
    fd(3 * a)
    down()
    fd(3 * a)
    #
    lt(90)
    fd(a)
    lt(90)
    #   №18
    up()
    fd(a)
    down()
    fd(2 * a)
    up()
    fd(4 * a)
    down()
    fd(3 * a)
    #
    rt(90)
    fd(a)
    rt(90)
    #   №19
    up()
    fd(a)
    down()
    fd(2 * a)
    up()
    fd(3 * a)
    down()
    fd(a)
    up()
    fd(3 * a)
    down()
    #
    lt(90)
    fd(a)
    lt(90)
    #   №20
    up()
    fd(2 * a)
    down()
    fd(3 * a)
    up()
    fd(2 * a)
    down()
    fd(4 * a)
    up()
    fd(a)
    down()
    #
    rt(90)
    fd(a)
    rt(90)
    #   №21
    up()
    fd(2 * a)
    down()
    fd(7 * a)
    up()
    fd(2 * a)
    down()
    fd(a)
    #
    lt(90)
    fd(a)
    lt(90)
    #   №22
    up()
    fd(4 * a)
    down()
    fd(a)
    up()
    fd(2 * a)
    down()
    fd(3 * a)
    up()
    fd(2 * a)
    down()
    #
    lt(90)
    fd(2 * a)
    lt(180)
    fd(3 * a)
    rt(90)
    #   №23
    fd(2 * a)
    up()
    fd(a)
    down()
    fd(a)
    up()
    fd(8 * a)
    down()
    #
    lt(90)
    fd(a)
    lt(90)
    #   №24
    up()
    fd(a)
    down()
    fd(2 * a)
    up()
    fd(7 * a)
    down()
    fd(2 * a)
    #
    rt(90)
    fd(a)
    rt(90)
    #   №25
    up()
    fd(6 * a)
    down()
    fd(2 * a)
    up()
    fd(4 * a)
    down()
    #
    lt(90)
    fd(a)
    lt(90)
    #   №26
    up()
    fd(a)
    down()
    fd(a)
    up()
    fd(a)
    down()
    fd(2 * a)
    up()
    fd(2 * a)
    down()
    fd(2 * a)
    up()
    fd(2 * a)
    down()
    fd(a)
    up()
    #
    rt(90)
    fd(a)
    rt(90)
    fd(11 * a)
    rt(90)
    down()
def spos3():
    #       №1
    up()
    fd(a)
    down()
    fd(a)
    up()
    fd(a)
    down()
    fd(3 * a)
    up()
    fd(a)
    down()
    fd(2 * a)
    up()
    fd(2 * a)
    down()
    fd(5 * a)
    up()
    fd(2 * a)
    down()
    fd(a)
    up()
    fd(2 * a)
    down()
    fd(3 * a)
    up()
    fd(a)
    down()
    fd(a)
    up()
    #
    rt(90)
    fd(a)
    rt(90)
    #       №2
    down()
    fd(a)
    up()
    fd(a)
    down()
    fd(a)
    up()
    fd(a)
    down()
    fd(2 * a)
    up()
    fd(4 * a)
    down()
    fd(2 * a)
    up()
    fd(2 * a)
    down()
    fd(a)
    up()
    fd(3 * a)
    down()
    fd(4 * a)
    up()
    fd(a)
    down()
    fd(2 * a)
    up()
    fd(a)
    down()
    #
    lt(90)
    fd(a)
    lt(90)
    #       №3
    up()
    fd(a)
    down()
    fd(5 * a)
    up()
    fd(3 * a)
    down()
    fd(3 * a)
    up()
    fd(2 * a)
    down()
    fd(a)
    up()
    fd(3 * a)
    down()
    fd(7 * a)
    up()
    fd(a)
    down()
    #
    rt(90)
    fd(a)
    rt(90)
    #       №4
    up()
    fd(2 * a)
    down()
    fd(5 * a)
    up()
    fd(4 * a)
    down()
    fd(a)
    up()
    fd(a)
    down()
    fd(5 * a)
    up()
    fd(3 * a)
    down()
    fd(3 * a)
    up()
    fd(2 * a)
    down()
    #
    lt(90)
    fd(a)
    lt(90)
    #       №5
    up()
    fd(3 * a)
    down()
    fd(2 * a)
    up()
    fd(2 * a)
    down()
    fd(5 * a)
    up()
    fd(a)
    down()
    fd(2 * a)
    up()
    fd(5 * a)
    down()
    fd(2 * a)
    up()
    fd(a)
    down()
    fd(a)
    up()
    fd(2 * a)
    down()
    #
    rt(90)
    fd(a)
    rt(90)
    #       №6
    fd(a)
    up()
    fd(a)
    down()
    fd(5 * a)
    up()
    fd(2 * a)
    down()
    fd(3 * a)
    up()
    fd(a)
    down()
    fd(11 * a)
    up()
    fd(a)
    down()
    fd(a)
    #
    lt(90)
    fd(a)
    lt(90)
    #       №7
    up()
    fd(a)
    down()
    fd(4 * a)
    up()
    fd(3 * a)
    down()
    fd(a)
    up()
    fd(3 * a)
    down()
    fd(a)
    up()
    fd(3 * a)
    down()
    fd(7 * a)
    up()
    fd(3 * a)
    down()
    #
    rt(90)
    fd(a)
    rt(90)
    #       №8
    up()
    fd(3 * a)
    down()
    fd(4 * a)
    up()
    fd(a)
    down()
    fd(3 * a)
    up()
    fd(2 * a)
    down()
    fd(3 * a)
    up()
    fd(6 * a)
    down()
    fd(2 * a)
    up()
    fd(2 * a)
    down()
    #
    lt(90)
    fd(a)
    lt(90)
    #       №9
    up()
    fd(a)
    down()
    fd(3 * a)
    up()
    fd(6 * a)
    down()
    fd(3 * a)
    up()
    fd(a)
    down()
    fd(2 * a)
    up()
    fd(3 * a)
    down()
    fd(2 * a)
    up()
    fd(3 * a)
    down()
    fd(a)
    up()
    fd(a)
    down()
    fd(a)
    #
    rt(90)
    fd(a)
    rt(90)
    #       №10
    up()
    fd(a)
    down()
    fd(a)
    up()
    fd(5 * a)
    down()
    fd(a)
    up()
    fd(2 * a)
    down()
    fd(10 * a)
    up()
    fd(2 * a)
    down()
    fd(a)
    up()
    fd(a)
    down()
    fd(3 * a) 
    #
    lt(90)
    fd(a)
    lt(90)
    #       №11
    up()
    fd(a)
    down()
    fd(a)
    up()
    fd(2 * a)
    down()
    fd(3 * a)
    up()
    fd(a)
    down()
    fd(10 * a)
    up()
    fd(6 * a)
    down()
    fd(2 * a)
    #
    rt(90)
    fd(a)
    rt(90)
    #       №12
    fd(a)
    up()
    fd(a)
    down()
    fd(2 * a)
    up()
    fd(6 * a)
    down()
    fd(3 * a)
    up()
    fd(2 * a)
    down()
    fd(a)
    up()
    fd(3 * a)
    down()
    fd(3 * a)
    up()
    fd(a)
    down()
    fd(2 * a)
    up()
    fd(a)
    #
    lt(90)
    fd(a)
    lt(90)
    #       №13
    up()
    fd(13 * a)
    down()
    fd(2 * a)
    up()
    fd(5 * a)
    down()
    fd(3 * a)
    up()
    fd(2 * a)
    down()
    fd(a)
    #
    rt(90)
    up()
    fd(a)
    down()
    rt(90)
    #       №14
    up()
    fd(4 * a)
    down()
    fd(a)
    up()
    fd(5 * a)
    down()
    fd(4 * a)
    #
    lt(90)
    fd(a)
    lt(90)
    #       №15
    up()
    fd(a)
    down()
    fd(3 * a)
    up()
    fd(a)
    down()
    fd(a)
    up()
    fd(3 * a)
    down()
    fd(2 * a)
    up()
    fd(3 * a)
    #
    rt(90)
    fd(a)
    rt(90)
    #       №16
    up()
    fd(a)
    down()
    fd(3 * a)
    up()
    fd(4 * a)
    down()
    fd(5 * a)
    up()
    fd(a)
    #
    lt(90)
    fd(a)
    lt(90)
    #       №17
    down()
    fd(9 * a)
    up()
    fd(2 * a)
    down()
    fd(a)
    up()
    fd(2 * a)
    down()
    #
    rt(90)
    fd(a)
    lt(90)
    fd(a)
    rt(180)
    fd(a)
    #       №18
    up()
    fd(5 * a)
    #
    lt(90)
    fd(a)
    lt(90)
    #       №19
    up()
    fd(a)
    down()
    fd(2 * a)
    up()
    fd(2 * a)
    down()
    #
    rt(90)
    fd(a)
    rt(90)
    #       №20
    up()
    fd(a)
    down()
    fd(3 * a)
    up()
    fd(a)
    #
    lt(90)
    fd(a)
    lt(90)
    #       №21
    down()
    fd(2 * a)
    up()
    fd(a)
    down()
    fd(2 * a)
    lt(90)
def gto(x, y):
    up()
    goto(x, y)
    down()
gto(-307.5, 202)
t.up()
t.down()
labirint()
spos2()
spos3()
color("#d42132")
hideturtle()
scr = t.getscreen()
scr.listen()
t.is_collide(end)
total_score = 0
kwadrat1 = Sprite(-255, 15, 15, "square", "Black")
kwadrat2 = Sprite(-300, -30, 15, "square", "Black")
kwadrat3 = Sprite(-255, 135, 15, "square", "Black")
kwadrat4 = Sprite(-11*step, 11*step, 15, "square", "Black")
kwadrat5 = Sprite(18*step, 3*step, 15, "square", "Black")
kwadrat6 = Sprite(19*s, 7*s, 15, "square", "Black")
kwadrat7 = Sprite(s, s, 15, "square", "Black")
kwadrat8 = Sprite(-9*s, 1*s, 15, "square", "Black")
kwadrat9 = Sprite(-7*s, 7*s, 15, "square", "Black")
kwadrat10 = Sprite(-5*s, 6*s, 15, "square", "Black")
kwadrat11 = Sprite(-2*s, 12*s, 15, "square", "Black")
kwadrat12 = Sprite(5*s, 9*s, 15, "square", "Black")
kwadrat13 = Sprite(4*s, 7*s, 15, "square", "Black")
kwadrat14 = Sprite(14*s, 12*s, 15, "square", "Black")
kwadrat15 = Sprite(-3*s, -2*s, 15, "square", "Black")
kwadrat16 = Sprite(9*s, -3*s, 15, "square", "Black")
kwadrat17 = Sprite(-3*s, -11*s, 15, "square", "Black")
kwadrat18 = Sprite(-16*s, -11*s, 15, "square", "Black")
kwadrat19 = Sprite(8*s, -12*s, 15, "square", "Black")
kwadrat20 = Sprite(11*s, -12*s, 15, "square", "Black")
pidskazka = input("Псс хоч підсказку??(так або ні)")
if pidskazka == "так":
    print("https://drive.google.com/file/d/1Bz74eMQO4QUK4b12d3-rWJee7eRahXxU/view?usp=drive_link")
elif pidskazka == "ні":
    print("Моя справа запропонувати")
else:
    print("Error 0")
print("Для управління w; a; s; d.")
print("Змінити колір 1-9, 0")
print("почати заливку - q, закіньчити - e")
print("Підняти черепашку - Space (Пробіл)")
print("Опустити черепашку - Shift")
print("якщо клацнути в будь-якій точці \n черепашка телепортується туди")
print("Також можна малювати курсором при зажатій ПКМ")
print("А ще ти можеш очистити все намальоване клавішою x")
print("та можеш переміститися у початкову позицію клавішею c")
print("Можемо начинати !")
t.ondrag(draw)
scr.onscreenclick(move)
scr.onkey(color1, "1")
scr.onkey(color2, "2")
scr.onkey(color3, "3")
scr.onkey(color4, "4")
scr.onkey(color5, "5")
scr.onkey(color6, "6")
scr.onkey(color7, "7")
scr.onkey(color8, "8")
scr.onkey(color9, "9")
scr.onkey(color0, "0")
scr.onkey(move_up, "w")
scr.onkey(move_down, "s")
scr.onkey(move_right, "d")
scr.onkey(move_left, "a")
scr.onkey(fil, "q")
scr.onkey(endd, "e")
scr.onkey(dow, "Shift_L")   # замінено "shift" -> "Shift_L"
scr.onkey(dow, "Shift_R")   # додатково для правого Shift
scr.onkey(upp, "space")
scr.onkey(clearr, "x")
scr.onkey(misce, "c")
kwadrat1.set_move(-255, 15, -255, 30)
kwadrat2.set_move(-300, -30, -285, -30)
kwadrat3.set_move(-255, 150, -255, 165)
kwadrat4.set_move(-11*step, 11*step, -10*step, 11*step)
kwadrat5.set_move(18*s, 3*s, 20*s, 3*s)
kwadrat6.set_move(19*s, 7*s, 20*s, 7*s)
kwadrat7.set_move(1*s, 1*s, 2*s, 1*s)
kwadrat8.set_move(-9*s, 1*s, -9*s, 2*s)
kwadrat9.set_move(-7*s, 7*s,-7*s,8*s)
kwadrat10.set_move(-5*s, 6*s, -5*s, 7*s)
kwadrat11.set_move(-2*s, 12*s, -2*s, 13*s)
kwadrat12.set_move(5*s, 9*s, 6*s, 9*s)
kwadrat13.set_move(4*s, 7*s, 4*s, 8*s)
kwadrat14.set_move(14*s,12*s,14*s,13*s)
kwadrat15.set_move(-3*s,-2*s,-4*s,-2*s)
kwadrat16.set_move(9*s, -3*s, 9*s, -4*s)
kwadrat17.set_move(-3*s, -11*s, -4*s, -11*s)
kwadrat18.set_move(-16*s, -11*s, -16*s, -12*s)
kwadrat19.set_move(8*s, -12*s, 8*s, -13*s)
kwadrat20.set_move(11*s, -12*s, 13*s, -12*s)
while total_score < 1:
    kwadrat1.make_step()
    kwadrat2.make_step()
    kwadrat3.make_step()
    kwadrat4.make_step()
    kwadrat5.make_step()
    kwadrat6.make_step()
    kwadrat7.make_step()
    kwadrat8.make_step()
    kwadrat9.make_step()
    kwadrat10.make_step()
    kwadrat11.make_step()
    kwadrat12.make_step()
    kwadrat13.make_step()
    kwadrat14.make_step()
    kwadrat15.make_step()
    kwadrat16.make_step()
    kwadrat17.make_step()
    kwadrat18.make_step()
    kwadrat19.make_step()
    kwadrat20.make_step()
    if t.is_collide(end):
        t.up()
        t.goto(0, 0)
        t.write("WIN!", font =('Microsoft SeiHei', 200,'nolmal'))
        total_score += 1
    elif t.is_collide(kwadrat1)or t.is_collide(kwadrat2)or t.is_collide(kwadrat3)or t.is_collide(kwadrat4)or t.is_collide(kwadrat5)or t.is_collide(kwadrat6)or t.is_collide(kwadrat7)or t.is_collide(kwadrat8)or t.is_collide(kwadrat9)or t.is_collide(kwadrat10)or t.is_collide(kwadrat11)or t.is_collide(kwadrat12)or t.is_collide(kwadrat13)or t.is_collide(kwadrat14)or t.is_collide(kwadrat15)or t.is_collide(kwadrat16)or t.is_collide(kwadrat17)or t.is_collide(kwadrat18)or t.is_collide(kwadrat19)or t.is_collide(kwadrat20):
        end.hideturtle()
        break
        
        exitonclick()
